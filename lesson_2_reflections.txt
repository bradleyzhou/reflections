What happens when you initialize a repository? Why do you need to do it?

    Git will create a .git directory. It will prepare the directory as a repository,
    possible for user commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is a 'buffer' area for changes that user is about to commit.
    It does not create or modify user-visible files in the working directory, and 
    has not been included into the repository.
    The staging area offers a flexible work space that user can be free to change
    his/her mind on what should be commited.

How can you use the staging area to make sure you have one commit per logical
change?

    I can compare the content of the staging area to that in the last commit, by
    using 'git diff --staged'. I can review the changes about to be commited, i.e.
    in the staging area, making sure all the changes are of one logical chunk.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    As mentioned, branches help to make experiments with files/programs logically 
    separated from each other. One can safely make changes, experiment new features,
    etc., without affecting existing working copies.

How do the diagrams help you visualize the branch structure?

    The branches show up in the diagram as real branches. So, we can see which branches
    are created when.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result is a merged commit with all changes from both branches. The diagram 
    represents the logical connections that the merged commit come from both branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    Pros: saves time and effort on non-conflict merges
    Cons: one may lose sight on some automatic merges